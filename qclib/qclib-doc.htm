<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=Generator content="Microsoft Word 12 (filtered)">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Cambria;
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:0in;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
h1
	{mso-style-link:"Heading 1 Char";
	margin-top:24.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	line-height:115%;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"Cambria","serif";
	color:#365F91;}
h2
	{mso-style-link:"Heading 2 Char";
	margin-top:10.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	line-height:115%;
	page-break-after:avoid;
	font-size:13.0pt;
	font-family:"Cambria","serif";
	color:#4F81BD;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{mso-style-link:"Header Char";
	margin:0in;
	margin-bottom:.0001pt;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{mso-style-link:"Footer Char";
	margin:0in;
	margin-bottom:.0001pt;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
p.MsoListParagraph, li.MsoListParagraph, div.MsoListParagraph
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
p.MsoListParagraphCxSpFirst, li.MsoListParagraphCxSpFirst, div.MsoListParagraphCxSpFirst
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
p.MsoListParagraphCxSpMiddle, li.MsoListParagraphCxSpMiddle, div.MsoListParagraphCxSpMiddle
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
p.MsoListParagraphCxSpLast, li.MsoListParagraphCxSpLast, div.MsoListParagraphCxSpLast
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
span.Heading1Char
	{mso-style-name:"Heading 1 Char";
	mso-style-link:"Heading 1";
	font-family:"Cambria","serif";
	color:#365F91;
	font-weight:bold;}
span.Heading2Char
	{mso-style-name:"Heading 2 Char";
	mso-style-link:"Heading 2";
	font-family:"Cambria","serif";
	color:#4F81BD;
	font-weight:bold;}
span.HeaderChar
	{mso-style-name:"Header Char";
	mso-style-link:Header;}
span.FooterChar
	{mso-style-name:"Footer Char";
	mso-style-link:Footer;}
.MsoPapDefault
	{margin-bottom:10.0pt;
	line-height:115%;}
 /* Page Definitions */
 @page WordSection1
	{size:8.5in 11.0in;
	margin:1.0in 1.0in 1.0in 1.0in;}
div.WordSection1
	{page:WordSection1;}
-->
</style>

</head>

<body lang=EN-US>

<div class=WordSection1>

<h1>QUICK START</h1>

<p class=MsoNormal>(see accompanying <span style='font-family:"Courier New"'>helloworld.py</span>)</p>

<p class=MsoNormal>Lets start with a simple example of using qclib, something
like a 'hello world' --</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;margin-bottom:.0001pt;line-height:normal'><span
style='font-family:"Courier New"'>import qclib</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;margin-bottom:.0001pt;line-height:normal'><span
style='font-family:"Courier New"'>qc = qclib.qcsim(8)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;margin-bottom:.0001pt;line-height:normal'><span
style='font-family:"Courier New"'>qc.qgate(qc.H(),[0])</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;margin-bottom:.0001pt;line-height:normal'><span
style='font-family:"Courier New"'>qc.qgate(qc.C(),[0,3])</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;margin-bottom:.0001pt;line-height:normal'><span
style='font-family:"Courier New"'>qc.qreport()</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;margin-bottom:.0001pt;line-height:normal'><span
style='font-family:"Courier New"'>qc.qmeasure(0)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;margin-bottom:.0001pt;line-height:normal'><span
style='font-family:"Courier New"'>qc.qreport()</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>When run, the above code generates the following output --</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;margin-bottom:.0001pt;line-height:normal'><span
style='font-family:"Courier New"'>State</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;margin-bottom:.0001pt;line-height:normal'><span
style='font-family:"Courier New"'>00000000    0.70710678+0.00000000j</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;margin-bottom:.0001pt;line-height:normal'><span
style='font-family:"Courier New"'>00001001    0.70710678+0.00000000j</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;margin-bottom:.0001pt;line-height:normal'><span
style='font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;margin-bottom:.0001pt;line-height:normal'><span
style='font-family:"Courier New"'>State</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;margin-bottom:.0001pt;line-height:normal'><span
style='font-family:"Courier New"'>00001001    1.00000000+0.00000000j</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>With respect to the functionality, the above code starts
with an 8-qbit system, and then sets up a bell state between qbits 3 and 0. And
then measures qbit 0. This is depicted in the diagram below --</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;margin-bottom:.0001pt;line-height:normal'><span
style='font-family:"Courier New"'>7 -------------------------</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;margin-bottom:.0001pt;line-height:normal'><span
style='font-family:"Courier New"'>6 -------------------------</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;margin-bottom:.0001pt;line-height:normal'><span
style='font-family:"Courier New"'>5 -------------------------</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;margin-bottom:.0001pt;line-height:normal'><span
style='font-family:"Courier New"'>4 -------------------------</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;margin-bottom:.0001pt;line-height:normal'><span
style='font-family:"Courier New"'>3 -----O-------------------</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;margin-bottom:.0001pt;line-height:normal'><span
style='font-family:"Courier New"'>2 -----|-------------------</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;margin-bottom:.0001pt;line-height:normal'><span
style='font-family:"Courier New"'>1 -----|-------------------</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;margin-bottom:.0001pt;line-height:normal'><span
style='font-family:"Courier New"'>0 -[H]-.-(/)---------------</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>(Using (/) to depict the measurement operation.)</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The output emitted by the above code is the dump of the
state right after the setting up of the bell state, and then after measuring
the qbit 0.</p>

<p class=MsoNormal>Lets go line by line to understand the code --</p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal;page-break-after:avoid'><b><span style='font-family:"Courier New"'>import
qclib</span></b></p>

<p class=MsoNormal>This line imports the qclib. Fairly straight forward.</p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal;page-break-after:avoid'><b><span style='font-family:"Courier New"'>qc =
qclib.qcsim(8)</span></b></p>

<p class=MsoNormal>The main class in the qclib library is qcsim. This line
creates an instance of that class. As a convention in this document, qc is
always used to represent an instance of the class qcsim. The qcsim class
instance, qc, represents a quantum computer. The number 8 as the parameter to
the constructor of class qclib, specifies the number of qbits in that quantum
computer.</p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal;page-break-after:avoid'><b><span style='font-family:"Courier New"'>qc.qgate(qc.H(),[0])</span></b></p>

<p class=MsoNormal>qgate() is the function that applies a quantum gate on a
given set of qbits in the system. In the above line of code, it applies the
hadamard gate (H()), to qbit 0. See the documentation below for the gates
available.</p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal;page-break-after:avoid'><b><span style='font-family:"Courier New"'>qc.qgate(qc.C(),[0,3])</span></b></p>

<p class=MsoNormal>Here a CNOT gate (C()) is applied on bits 0 and 3, with qbit
0 being the control qbit.</p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal;page-break-after:avoid'><b><span style='font-family:"Courier New"'>qc.qreport()</span></b></p>

<p class=MsoNormal>The function qreport() outputs the current superposition
state. The first batch of lines is that output.</p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal;page-break-after:avoid'><b><span style='font-family:"Courier New"'>qc.qmeasure(0)</span></b></p>

<p class=MsoNormal>The qmeasure() function measures qbit 0.</p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal;page-break-after:avoid'><b><span style='font-family:"Courier New"'>qc.qreport()</span></b></p>

<p class=MsoNormal>This last qreport() function call outputs the state after
the measurement of the qbit 0.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Finally, let us run the same code with trace turned on
(therefore removed the qreport() function calls). Turning trace ON, it outputs
the state after init and each gate and measurement step (see accompanying <span
style='font-family:"Courier New"'>helloworld_traceON.py</span>) --</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;margin-bottom:.0001pt;line-height:normal'><span
style='font-family:"Courier New"'>import qclib</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;margin-bottom:.0001pt;line-height:normal'><span
style='font-family:"Courier New"'>qc = qclib.qclib(8, qtrace=True)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;margin-bottom:.0001pt;line-height:normal'><span
style='font-family:"Courier New"'>qc.qgate(qc.H(),[0])</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;margin-bottom:.0001pt;line-height:normal'><span
style='font-family:"Courier New"'>qc.qgate(qc.C(),[0,3])</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;margin-bottom:.0001pt;line-height:normal'><span
style='font-family:"Courier New"'>qc.qmeasure(0)</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>and, here is its output --</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;margin-bottom:.0001pt;line-height:normal'><span
style='font-family:"Courier New"'>Initial State</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;margin-bottom:.0001pt;line-height:normal'><span
style='font-family:"Courier New"'>00000000    1.00000000+0.00000000j</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;margin-bottom:.0001pt;line-height:normal'><span
style='font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;margin-bottom:.0001pt;line-height:normal'><span
style='font-family:"Courier New"'>HADAMARD Qbit[0]</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;margin-bottom:.0001pt;line-height:normal'><span
style='font-family:"Courier New"'>00000000    0.70710678+0.00000000j</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;margin-bottom:.0001pt;line-height:normal'><span
style='font-family:"Courier New"'>00000001    0.70710678+0.00000000j</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;margin-bottom:.0001pt;line-height:normal'><span
style='font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;margin-bottom:.0001pt;line-height:normal'><span
style='font-family:"Courier New"'>C-NOT Qbit[0, 3]</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;margin-bottom:.0001pt;line-height:normal'><span
style='font-family:"Courier New"'>00000000    0.70710678+0.00000000j</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;margin-bottom:.0001pt;line-height:normal'><span
style='font-family:"Courier New"'>00001001    0.70710678+0.00000000j</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;margin-bottom:.0001pt;line-height:normal'><span
style='font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;margin-bottom:.0001pt;line-height:normal'><span
style='font-family:"Courier New"'>MEASURED Qbit[0] = 1 with probality = 0.5</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;margin-bottom:.0001pt;line-height:normal'><span
style='font-family:"Courier New"'>00001001    1.00000000+0.00000000j</span></p>

<h1>FUNCTIONS</h1>

<h2>qclib.qcsim(nqbits, qtrace=False, qzeros=False)</h2>

<p class=MsoNormal>First argument specifies the number of qbits in the system.
Prepares all qbits to |0&gt;.</p>

<p class=MsoNormal>If qtrace=True, causes each operation (gate, measurement) to
emit resulting state.</p>

<p class=MsoNormal>If qzeros=True, prints even those whose amplitude is 0.</p>

<h2>qgate(gate_function, list_of_qbits, display=False)</h2>

<p class=MsoNormal>qgate() is used to perform quantum gate operations on a set
of qbits.</p>

<p class=MsoNormal>There are a number of gates pre-created within the qclib
class, and additional gates can be defined by the users (see Section USER
DEFINED GATE below). If a gate operates on more than 1 qbit (e.g., CNOT gate, or
SWAP gate, etc.) then the list in the second argument (<span style='font-family:
"Courier New"'>list_of_qbits</span>) would contain that many qbits.</p>

<p class=MsoNormal>The function qgate() validates the number of bits passed in <span
style='font-family:"Courier New"'>list_of_qbits</span> against the number of
qbits required for the gate, if not correct, throws an exception.</p>

<p class=MsoNormal>If <span style='font-family:"Courier New"'>display </span>is
<span style='font-family:"Courier New"'>True</span>, the resulting state is
printed out.</p>

<h2>comb_op = qcombine_seq(name, op_list)</h2>

<p class=MsoNormal>Combines a sequential application of gates into one
equivalent gate. The parameter <span style='font-family:"Courier New"'>name</span>
is the name of the resulting gate. Parameter <span style='font-family:"Courier New"'>op_list</span>
is a list of gates each of the structure <span style='font-family:"Courier New"'>[name,matrix]</span>.</p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-indent:
.5in;line-height:normal'><span style='font-family:"Courier New"'>--[A]-[B]--[C]--[D]   
</span><span style='font-family:Wingdings'>è</span><span style='font-family:
"Courier New"'>   --[G]--</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><span style='font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal>To combine the above </p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-indent:
.5in;line-height:normal'><span style='font-family:"Courier New"'>G =
qc.qcombine_seq(SEQ,[A,B,C,D])</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><span style='font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'>and to use it, for instance to apply it on qbit 2 --</p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'>&nbsp;</p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-indent:
.5in;line-height:normal'><span style='font-family:"Courier New"'>qc.qgate(G,[2])</span></p>

<h2>comb_op = qcombine_par(name, op_list)</h2>

<p class=MsoNormal>Combines a parallel application of gates into one equivalent
gate. The parameter <span style='font-family:"Courier New"'>name</span> is the
name of the resulting gate. Parameter <span style='font-family:"Courier New"'>op_list</span>
is a list of gates each of the structure <span style='font-family:"Courier New"'>[name,matrix]</span>.</p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-indent:
.5in;line-height:normal'><span style='font-family:"Courier New"'>                       
  _</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-indent:
.5in;line-height:normal'><span style='font-family:"Courier New"'>3 --[A]----          3
--| |--</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-indent:
.5in;line-height:normal'><span style='font-family:"Courier New"'>2 -[B]----     </span><span
style='font-family:Wingdings'>è</span><span style='font-family:"Courier New"'>    2
--| |--</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-indent:
.5in;line-height:normal'><span style='font-family:"Courier New"'>1 --[C]----          1
--|G|--</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-indent:
.5in;line-height:normal'><span style='font-family:"Courier New"'>0 --[D]----          0
--| |--</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-indent:
.5in;line-height:normal'><span style='font-family:"Courier New"'>                         
-</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-indent:
.5in;line-height:normal'><span style='font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal>To combine the above into one operation with 4 qbits as
inputs </p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-indent:
.5in;line-height:normal'><span style='font-family:"Courier New"'>G =
qc.qcombine_par(PAR,[A,B,C,D])</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><span style='font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'>and to use it, for instance to apply it on qbits 7,5,3,1 --</p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'>&nbsp;</p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-indent:
.5in;line-height:normal'><span style='font-family:"Courier New"'>qc.qgate(G,[7,5,3,1])</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><span style='font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal>An interesting example is </p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-indent:
.5in;line-height:normal'><span style='font-family:"Courier New"'>                           _</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-indent:
.5in;line-height:normal'><span style='font-family:"Courier New"'>1 --[H]----          1
--|  |--</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-indent:
.5in;line-height:normal'><span style='font-family:"Courier New"'>                        
|H2|</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-indent:
.5in;line-height:normal'><span style='font-family:"Courier New"'>0 --[H]----          0
--|  |--</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-indent:
.5in;line-height:normal'><span style='font-family:"Courier New"'>                         
--</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-indent:
.5in;line-height:normal'><span style='font-family:"Courier New"'>H2 =
qc.qcombine_par(H2,[H,H])</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><span style='font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-indent:
.5in;line-height:normal'><span style='font-family:"Courier New"'>                           _</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-indent:
.5in;line-height:normal'><span style='font-family:"Courier New"'>3 ---.-----          3
--|  |--</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-indent:
.5in;line-height:normal'><span style='font-family:"Courier New"'>     |                  
|  |</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-indent:
.5in;line-height:normal'><span style='font-family:"Courier New"'>2 ---O-----          2
--|  |--</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-indent:
.5in;line-height:normal'><span style='font-family:"Courier New"'>                        
|C2|</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-indent:
.5in;line-height:normal'><span style='font-family:"Courier New"'>1 ---.-----          1
--|  |--</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-indent:
.5in;line-height:normal'><span style='font-family:"Courier New"'>     |                  
|  |</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-indent:
.5in;line-height:normal'><span style='font-family:"Courier New"'>0 ---O-----          0
--|  |--</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-indent:
.5in;line-height:normal'><span style='font-family:"Courier New"'>                           --</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-indent:
.5in;line-height:normal'><span style='font-family:"Courier New"'>C2 =
qc.qcombine_par(C2,[C,C])</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><span style='font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><span style='font-family:"Courier New"'>Create 2 bell states between
quits 7,6 and 5,4 using these --</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-indent:
.5in;line-height:normal'><span style='font-family:"Courier New"'>qc.qgate(H2,[7,5])</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-indent:
.5in;line-height:normal'><span style='font-family:"Courier New"'>qc.qgate(C2,[7,6,5,4])</span></p>

<h2>newgate = qstretch(gate_function, list_of_qbits)</h2>

<p class=MsoNormal>qstretch takes a gate and a specifc ordered list of qbits on
which it would operate and stretches it to handle *all* qbits in the system.
Basically, the resulting <span style='font-family:"Courier New"'>newgate</span>
takes as input all the qbits in the system provided as [msb,,lsb], but
performs the original operation only on the given <span style='font-family:
"Courier New"'>list_of_qbits</span>, and passes through all the other qbits unaffected.</p>

<p class=MsoNormal>For instance, lets assume we created a 4 qbit system (<span
style='font-family:"Courier New"'>qclib.qcsim(4)</span>), and in that we use C
gate on qbits 3 and 0 (<span style='font-family:"Courier New"'>qgate(C(),[3,0])</span>).
That is shown on the left side. Stretch takes the same arguments and creates a gate
that operates on 4 qbits, but still affects only qbits 3 and 0, passing the
others through. </p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-indent:
.5in;line-height:normal'><span style='font-family:"Courier New"'>                         
--- </span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-indent:
.5in;line-height:normal'><span style='font-family:"Courier New"'>3 ---.-----          3
--| . |--</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-indent:
.5in;line-height:normal'><span style='font-family:"Courier New"'>     |                  
| | |</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-indent:
.5in;line-height:normal'><span style='font-family:"Courier New"'>2 ---|-----          2
--| | |--</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><span style='font-family:"Courier New"'>          |                   |
| |</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-indent:
.5in;line-height:normal'><span style='font-family:"Courier New"'>1 ---|-----          1
--| | |--</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-indent:
.5in;line-height:normal'><span style='font-family:"Courier New"'>     |                  
| | |</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-indent:
.5in;line-height:normal'><span style='font-family:"Courier New"'>0 ---O-----          0
--| o |--</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-indent:
.5in;line-height:normal'><span style='font-family:"Courier New"'>                         
---</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-indent:
.5in;line-height:normal'><span style='font-family:"Courier New"'>qgate(C(),[3,0])     ng
= qstretch(C(),[3,0])</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-indent:
.5in;line-height:normal'><span style='font-family:"Courier New"'>                     qgate(ng,[3,2,1,0])</span></p>

<h2>v = qmeasure(qbit_number,display=False)</h2>

<p class=MsoNormal>Returns the measured value of the qbit, 0 or 1.</p>

<p class=MsoNormal>If the bit is in a superposition with some amplitude, the measurement
operation will cause the state to randomly collapse to one or the other with
the appropriate probability. In this simulator, the Python random.random()
function is used to generate the randomness to decide which state to collapse
into.</p>

<p class=MsoNormal>Cleary, the computations can continue after the measurement
operations.</p>

<p class=MsoNormal>If <span style='font-family:"Courier New"'>display </span>is
<span style='font-family:"Courier New"'>True</span>, the resulting state is
printed out.</p>

<h2>qreport(state=None, header=&quot;State&quot;)</h2>

<p class=MsoNormal>Prints the current state of the system. if <span
style='font-family:"Courier New"'>state </span>parameter is provided with a
column numpy.matrix, it prints that state instead.</p>

<p class=MsoNormal>The parameter <span style='font-family:"Courier New"'>header
</span>provides the text to be printed above the state information.</p>

<h2>st = qstate()</h2>

<p class=MsoNormal>Returns a Python array of the complex amplitudes of all
possible superpositions of the qbits in the system.</p>

<h2>n = qsize()</h2>

<p class=MsoNormal>Returns the number of qbits in the system.</p>

<h2>qtraceON(boolean)</h2>

<p class=MsoNormal>Turns ON or OFF outputting of state after each qgate() and
qmeasure() function call.</p>

<h2>qzerosON(boolean)</h2>

<p class=MsoNormal>Turns ON or OFF of zero amplitude states in trace outputs
and qreport() outputs.</p>

<h1>PERFORMANCE</h1>

<p class=MsoNormal>On my laptop PC, I could go upto 11 qbits. Up until 8 qbits
the simulator runs pretty fast. Beyond that the speed starts slowing down. At
11 qbits the simulator takes many seconds to apply 1 gate. At 12 qbits I get Memory
Error.</p>

<p class=MsoNormal>I have not found any functionality bugs in this version of
the simulator. Please report below if you find any.</p>

<h1>PRE DEFINED GATES</h1>

<p class=MsoNormal>A number of gates are pre-defined in the qclib class. The
following is the list --</p>

<p class=MsoNormal><b>H()</b>         Hadamard gate</p>

<p class=MsoNormal><b>X()</b>          Pauli_x gate</p>

<p class=MsoNormal><b>Y()</b>          Pauli_y gate</p>

<p class=MsoNormal><b>Z()</b>          Pauli_z gate</p>

<p class=MsoNormal><b>R(phi)</b>   Phase rotation by phi</p>

<p class=MsoNormal><b>C()</b>          CNOT gate</p>

<p class=MsoNormal><b>SWAP()</b>                SWAP gate</p>

<h1>CREATING USER DEFINED GATES</h1>

<p class=MsoNormal>(see accompanying <span style='font-family:"Courier New"'>user_def_gates.py</span>)</p>

<p class=MsoNormal>Qcsim allows using user defined gates. A user defined gate
would be written as a function that returns a Python array with two elements <span
style='font-family:"Courier New"'>[name_string, unitary_matrix]</span>. The
element <span style='font-family:"Courier New"'>unitary_matrix</span> is the
matrix that specifies the gate. It should be created using <span
style='font-family:"Courier New"'>numpy.matrix([...],dtype=complex)</span>, or
equivalent. The element <span style='font-family:"Courier New"'>name_string</span>
is a string that is a user-friendly name of that gate that is used in logs and
debug traces.</p>

<p class=MsoNormal>Qcsim does NOT verify if <span style='font-family:"Courier New"'>unitary_matrix</span>
in the user-defined gate is indeed a unitary matrix. It is left as the
responsibility of the user. &lt;Perhaps an enhancement for later on.&gt;</p>

<p class=MsoNormal>Here is an example of a simple way for a user to define a
CNOT gate --</p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-indent:
.5in;line-height:normal'><span style='font-family:"Courier New"'>def myCNOT():</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-indent:
.5in;line-height:normal'><span style='font-family:"Courier New"'>     return
[&quot;MY-CNOT&quot;, numpy.matrix([[1,0,0,0],[0,1,0,0],[0,0,0,1],[0,0,1,0]],dtype=complex)]</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><span style='font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal>As shown in the code above, while writing the unitary_matrix
for myCNOT we assumed as if the entire system has only 2 qbits.</p>

<p class=MsoNormal>Now, since in this definition of CNOT the higher order qbit
(MSB) is the controlling qbit, hence when applying this gate to any two qbits,
say, 4 and 7, where say, bit 4 is the controlling qbit, the qgate() function
would be invoked as --</p>

<p class=MsoNormal style='text-indent:.5in'><span style='font-family:"Courier New"'>qc.qgate(myCNOT(),[4,7])</span></p>

<p class=MsoNormal>Or, if qbit 7 is to be the controlling qbit, then --</p>

<p class=MsoNormal style='margin-left:.5in'><span style='font-family:"Courier New"'>qc.qgate(myCNOT(),[7,4])</span></p>

<p class=MsoNormal>Qclib does all the trickery required to convert the gate
matrix to handle all the qbits of the system, and performing the gate operation
only on the speciic qbits.</p>

<p class=MsoNormal>So, in general, if the gate operates on n qbits, then it
should be written as if the entire system consists of only n qbits, and when
calling <span style='font-family:"Courier New"'>qgate()</span>, the order of
qbits should be <span style='font-family:"Courier New"'>[msb, ..., lsb]</span>.</p>

<p class=MsoNormal>The system looks at the size of the matrix specifying the
gate to determine the number of qbits required for that gate. If the number is
incorrect, it throws an exception.</p>

<p class=MsoNormal>Since the gate is defined in form of a function, it can take
parameters. For instance, for a rotation gate, the rotation angle can be passed
as a parameter -- </p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-indent:
.5in;line-height:normal'><span style='font-family:"Courier New"'>def
myR(theta):</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-indent:
.5in;line-height:normal'><span style='font-family:"Courier New"'>     c =
numpy.cos(theta)</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-indent:
.5in;line-height:normal'><span style='font-family:"Courier New"'>     s =
numpy.sin(theta)</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-indent:
.5in;line-height:normal'><span style='font-family:"Courier New"'>     return
[&quot;MY-Rotation({:0.4f})&quot;.format(theta), numpy.matrix([[1,0],[0,complex(c,s)]],dtype=complex)]</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;text-indent:
.5in;line-height:normal'><span style='font-family:"Courier New"'>qc.qgate(myR(numpy.pi/2),[5])</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal'><span style='font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal>Note: To see some change in the state, perform an X() or H()
or some such on the qbit before the phase rotation.</p>

</div>

</body>

</html>
